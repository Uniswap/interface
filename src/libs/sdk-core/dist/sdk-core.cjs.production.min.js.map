{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/constants.ts","../src/utils/currencyEquals.ts","../src/entities/baseCurrency.ts","../src/entities/ether.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/utils/sqrt.ts","../src/utils/wrappedCurrency.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/wrappedCurrencyAmount.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÃ–RLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import { Currency } from '../entities/currency'\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA.isToken && currencyB.isToken) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA.isToken) {\n    return false\n  } else if (currencyB.isToken) {\n    return false\n  } else {\n    return currencyA.isEther === currencyB.isEther\n  }\n}\n","import invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport abstract class BaseCurrency {\n  public abstract readonly isEther: boolean\n  public abstract readonly isToken: boolean\n\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the currency Ether\n */\nexport class Ether extends BaseCurrency {\n  public readonly isEther: true = true\n  public readonly isToken: false = false\n\n  /**\n   * Only called once by this class\n   * @protected\n   */\n  protected constructor() {\n    super(18, 'ETH', 'Ether')\n  }\n\n  /**\n   * The only instance of the class `Ether`.\n   */\n  public static readonly ETHER: Ether = new Ether()\n}\n\nexport const ETHER = Ether.ETHER\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { currencyEquals } from '../../utils/currencyEquals'\nimport { Currency } from '../currency'\nimport { Ether } from '../ether'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param rawAmount ether amount in wei\n   */\n  public static ether(rawAmount: BigintIsh): CurrencyAmount<Ether> {\n    return CurrencyAmount.fromRawAmount(Ether.ETHER, rawAmount)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(currencyEquals(this.currency, other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(currencyEquals(this.currency, other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport { currencyEquals } from '../../utils/currencyEquals'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isEther: false = false\n  public readonly isToken: true = true\n\n  public readonly chainId: ChainId | number\n  public readonly address: string\n\n  public constructor(chainId: ChainId | number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\nexport const WETH9: { [chainId in ChainId]: Token } = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH9', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH9', 'Wrapped Ether')\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { Currency, Token, WETH9 } from '../entities'\n\n/**\n * Given a currency which can be Ether or a token, return wrapped ether for ether and the token for the token\n * @param currency the currency to wrap, if necessary\n * @param chainId the ID of the chain for wrapping\n */\nexport function wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency.isToken) {\n    invariant(currency.chainId === chainId, 'CHAIN_ID')\n    return currency\n  }\n  if (currency.isEther) return WETH9[chainId]\n  throw new Error('CURRENCY')\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ChainId } from '../constants'\nimport { Currency, CurrencyAmount, Token } from '../entities'\nimport { wrappedCurrency } from './wrappedCurrency'\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as a wrapped token amount.\n * In other words, if the currency is ETHER, returns the WETH9 token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nexport function wrappedCurrencyAmount(\n  currencyAmount: CurrencyAmount<Currency>,\n  chainId: ChainId\n): CurrencyAmount<Token> {\n  return CurrencyAmount.fromFractionalAmount(\n    wrappedCurrency(currencyAmount.currency, chainId),\n    currencyAmount.numerator,\n    currencyAmount.denominator\n  )\n}\n"],"names":["ChainId","TradeType","Rounding","MaxUint256","JSBI","BigInt","currencyEquals","currencyA","currencyB","isToken","equals","isEther","BaseCurrency","decimals","symbol","name","Number","isInteger","invariant","Ether","ETHER","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","this","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","_this","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","ether","added","subtracted","multiplied","divided","_Fraction","toExact","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","scalar","quote","currencyAmount","result","adjustedForDecimals","validateAndParseAddress","address","getAddress","error","Token","chainId","sortsBefore","toLowerCase","WETH9","MAINNET","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","MAX_SAFE_INTEGER","ZERO","ONE","TWO","wrappedCurrency","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}