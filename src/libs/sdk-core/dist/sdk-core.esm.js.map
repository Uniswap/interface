{"version":3,"file":"sdk-core.esm.js","sources":["../src/constants.ts","../src/utils/currencyEquals.ts","../src/entities/baseCurrency.ts","../src/entities/ether.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts","../src/utils/wrappedCurrency.ts","../src/utils/wrappedCurrencyAmount.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÃ–RLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import { Currency } from '../entities/currency'\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA.isToken && currencyB.isToken) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA.isToken) {\n    return false\n  } else if (currencyB.isToken) {\n    return false\n  } else {\n    return currencyA.isEther === currencyB.isEther\n  }\n}\n","import invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport abstract class BaseCurrency {\n  public abstract readonly isEther: boolean\n  public abstract readonly isToken: boolean\n\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the currency Ether\n */\nexport class Ether extends BaseCurrency {\n  public readonly isEther: true = true\n  public readonly isToken: false = false\n\n  /**\n   * Only called once by this class\n   * @protected\n   */\n  protected constructor() {\n    super(18, 'ETH', 'Ether')\n  }\n\n  /**\n   * The only instance of the class `Ether`.\n   */\n  public static readonly ETHER: Ether = new Ether()\n}\n\nexport const ETHER = Ether.ETHER\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { currencyEquals } from '../../utils/currencyEquals'\nimport { Currency } from '../currency'\nimport { Ether } from '../ether'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param rawAmount ether amount in wei\n   */\n  public static ether(rawAmount: BigintIsh): CurrencyAmount<Ether> {\n    return CurrencyAmount.fromRawAmount(Ether.ETHER, rawAmount)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(currencyEquals(this.currency, other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(currencyEquals(this.currency, other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport { currencyEquals } from '../../utils/currencyEquals'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isEther: false = false\n  public readonly isToken: true = true\n\n  public readonly chainId: ChainId | number\n  public readonly address: string\n\n  public constructor(chainId: ChainId | number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\nexport const WETH9: { [chainId in ChainId]: Token } = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH9', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH9', 'Wrapped Ether')\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { Currency, Token, WETH9 } from '../entities'\n\n/**\n * Given a currency which can be Ether or a token, return wrapped ether for ether and the token for the token\n * @param currency the currency to wrap, if necessary\n * @param chainId the ID of the chain for wrapping\n */\nexport function wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency.isToken) {\n    invariant(currency.chainId === chainId, 'CHAIN_ID')\n    return currency\n  }\n  if (currency.isEther) return WETH9[chainId]\n  throw new Error('CURRENCY')\n}\n","import { ChainId } from '../constants'\nimport { Currency, CurrencyAmount, Token } from '../entities'\nimport { wrappedCurrency } from './wrappedCurrency'\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as a wrapped token amount.\n * In other words, if the currency is ETHER, returns the WETH9 token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nexport function wrappedCurrencyAmount(\n  currencyAmount: CurrencyAmount<Currency>,\n  chainId: ChainId\n): CurrencyAmount<Token> {\n  return CurrencyAmount.fromFractionalAmount(\n    wrappedCurrency(currencyAmount.currency, chainId),\n    currencyAmount.numerator,\n    currencyAmount.denominator\n  )\n}\n"],"names":["ChainId","TradeType","Rounding","MaxUint256","JSBI","BigInt","currencyEquals","currencyA","currencyB","isToken","equals","isEther","BaseCurrency","decimals","symbol","name","Number","isInteger","invariant","Ether","ETHER","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","ether","added","subtracted","multiplied","divided","toExact","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","scalar","quote","currencyAmount","result","adjustedForDecimals","validateAndParseAddress","address","getAddress","error","Token","chainId","sortsBefore","toLowerCase","WETH9","MAINNET","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","wrappedCurrency","wrappedCurrencyAmount"],"mappings":"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"}