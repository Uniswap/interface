'use strict'
function t(t) {
  return t && 'object' == typeof t && 'default' in t ? t.default : t
}
Object.defineProperty(exports, '__esModule', { value: !0 })
var r,
  n,
  e,
  i = t(require('jsbi')),
  o = t(require('tiny-invariant')),
  a = t(require('decimal.js-light')),
  u = t(require('big.js')),
  s = t(require('toformat')),
  c = require('@ethersproject/address')
;((r = exports.ChainId || (exports.ChainId = {}))[(r.MAINNET = 1)] = 'MAINNET'),
  (r[(r.ROPSTEN = 3)] = 'ROPSTEN'),
  (r[(r.RINKEBY = 4)] = 'RINKEBY'),
  (r[(r['GÖRLI'] = 5)] = 'GÖRLI'),
  (r[(r.KOVAN = 42)] = 'KOVAN'),
  ((n = exports.TradeType || (exports.TradeType = {}))[(n.EXACT_INPUT = 0)] = 'EXACT_INPUT'),
  (n[(n.EXACT_OUTPUT = 1)] = 'EXACT_OUTPUT'),
  ((e = exports.Rounding || (exports.Rounding = {}))[(e.ROUND_DOWN = 0)] = 'ROUND_DOWN'),
  (e[(e.ROUND_HALF_UP = 1)] = 'ROUND_HALF_UP'),
  (e[(e.ROUND_UP = 2)] = 'ROUND_UP')
var d = i.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')
function f(t, r) {
  for (var n = 0; n < r.length; n++) {
    var e = r[n]
    ;(e.enumerable = e.enumerable || !1),
      (e.configurable = !0),
      'value' in e && (e.writable = !0),
      Object.defineProperty(t, e.key, e)
  }
}
function l(t, r, n) {
  return r && f(t.prototype, r), n && f(t, n), t
}
function m(t, r) {
  ;(t.prototype = Object.create(r.prototype)), (t.prototype.constructor = t), (t.__proto__ = r)
}
function p(t, r) {
  return t.isToken && r.isToken ? t.equals(r) : !t.isToken && !r.isToken && t.isEther === r.isEther
}
var h = function (t, r, n) {
    ;(t >= 0 && t < 255 && Number.isInteger(t)) || o(!1), (this.decimals = t), (this.symbol = r), (this.name = n)
  },
  y = (function (t) {
    function r() {
      var r
      return ((r = t.call(this, 18, 'ETH', 'Ether') || this).isEther = !0), (r.isToken = !1), r
    }
    return m(r, t), r
  })(h)
y.ETHER = new y()
var v,
  g,
  x = y.ETHER,
  E = s(a),
  N = s(u),
  I =
    (((v = {})[exports.Rounding.ROUND_DOWN] = E.ROUND_DOWN),
    (v[exports.Rounding.ROUND_HALF_UP] = E.ROUND_HALF_UP),
    (v[exports.Rounding.ROUND_UP] = E.ROUND_UP),
    v),
  R =
    (((g = {})[exports.Rounding.ROUND_DOWN] = 0),
    (g[exports.Rounding.ROUND_HALF_UP] = 1),
    (g[exports.Rounding.ROUND_UP] = 3),
    g),
  T = (function () {
    function t(t, r) {
      void 0 === r && (r = i.BigInt(1)), (this.numerator = i.BigInt(t)), (this.denominator = i.BigInt(r))
    }
    t.tryParseFraction = function (r) {
      if (r instanceof i || 'number' == typeof r || 'string' == typeof r) return new t(r)
      if ('numerator' in r && 'denominator' in r) return r
      throw new Error('Could not parse fraction')
    }
    var r = t.prototype
    return (
      (r.invert = function () {
        return new t(this.denominator, this.numerator)
      }),
      (r.add = function (r) {
        var n = t.tryParseFraction(r)
        return i.equal(this.denominator, n.denominator)
          ? new t(i.add(this.numerator, n.numerator), this.denominator)
          : new t(
              i.add(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator)),
              i.multiply(this.denominator, n.denominator)
            )
      }),
      (r.subtract = function (r) {
        var n = t.tryParseFraction(r)
        return i.equal(this.denominator, n.denominator)
          ? new t(i.subtract(this.numerator, n.numerator), this.denominator)
          : new t(
              i.subtract(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator)),
              i.multiply(this.denominator, n.denominator)
            )
      }),
      (r.lessThan = function (r) {
        var n = t.tryParseFraction(r)
        return i.lessThan(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator))
      }),
      (r.equalTo = function (r) {
        var n = t.tryParseFraction(r)
        return i.equal(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator))
      }),
      (r.greaterThan = function (r) {
        var n = t.tryParseFraction(r)
        return i.greaterThan(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator))
      }),
      (r.multiply = function (r) {
        var n = t.tryParseFraction(r)
        return new t(i.multiply(this.numerator, n.numerator), i.multiply(this.denominator, n.denominator))
      }),
      (r.divide = function (r) {
        var n = t.tryParseFraction(r)
        return new t(i.multiply(this.numerator, n.denominator), i.multiply(this.denominator, n.numerator))
      }),
      (r.toSignificant = function (t, r, n) {
        void 0 === r && (r = { groupSeparator: '' }),
          void 0 === n && (n = exports.Rounding.ROUND_HALF_UP),
          Number.isInteger(t) || o(!1),
          t > 0 || o(!1),
          E.set({ precision: t + 1, rounding: I[n] })
        var e = new E(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(t)
        return e.toFormat(e.decimalPlaces(), r)
      }),
      (r.toFixed = function (t, r, n) {
        return (
          void 0 === r && (r = { groupSeparator: '' }),
          void 0 === n && (n = exports.Rounding.ROUND_HALF_UP),
          Number.isInteger(t) || o(!1),
          t >= 0 || o(!1),
          (N.DP = t),
          (N.RM = R[n]),
          new N(this.numerator.toString()).div(this.denominator.toString()).toFormat(t, r)
        )
      }),
      l(t, [
        {
          key: 'quotient',
          get: function () {
            return i.divide(this.numerator, this.denominator)
          },
        },
        {
          key: 'remainder',
          get: function () {
            return new t(i.remainder(this.numerator, this.denominator), this.denominator)
          },
        },
        {
          key: 'asFraction',
          get: function () {
            return new t(this.numerator, this.denominator)
          },
        },
      ]),
      t
    )
  })(),
  F = s(u),
  A = (function (t) {
    function r(r, n, e) {
      var a
      return (
        (a = t.call(this, n, e) || this),
        i.lessThanOrEqual(a.quotient, d) || o(!1),
        (a.currency = r),
        (a.decimalScale = i.exponentiate(i.BigInt(10), i.BigInt(r.decimals))),
        a
      )
    }
    m(r, t),
      (r.fromRawAmount = function (t, n) {
        return new r(t, n)
      }),
      (r.fromFractionalAmount = function (t, n, e) {
        return new r(t, n, e)
      }),
      (r.ether = function (t) {
        return r.fromRawAmount(y.ETHER, t)
      })
    var n = r.prototype
    return (
      (n.add = function (n) {
        p(this.currency, n.currency) || o(!1)
        var e = t.prototype.add.call(this, n)
        return r.fromFractionalAmount(this.currency, e.numerator, e.denominator)
      }),
      (n.subtract = function (n) {
        p(this.currency, n.currency) || o(!1)
        var e = t.prototype.subtract.call(this, n)
        return r.fromFractionalAmount(this.currency, e.numerator, e.denominator)
      }),
      (n.multiply = function (n) {
        var e = t.prototype.multiply.call(this, n)
        return r.fromFractionalAmount(this.currency, e.numerator, e.denominator)
      }),
      (n.divide = function (n) {
        var e = t.prototype.divide.call(this, n)
        return r.fromFractionalAmount(this.currency, e.numerator, e.denominator)
      }),
      (n.toSignificant = function (r, n, e) {
        return (
          void 0 === r && (r = 6),
          void 0 === e && (e = exports.Rounding.ROUND_DOWN),
          t.prototype.divide.call(this, this.decimalScale).toSignificant(r, n, e)
        )
      }),
      (n.toFixed = function (r, n, e) {
        return (
          void 0 === r && (r = this.currency.decimals),
          void 0 === e && (e = exports.Rounding.ROUND_DOWN),
          r <= this.currency.decimals || o(!1),
          t.prototype.divide.call(this, this.decimalScale).toFixed(r, n, e)
        )
      }),
      (n.toExact = function (t) {
        return (
          void 0 === t && (t = { groupSeparator: '' }),
          (F.DP = this.currency.decimals),
          new F(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(t)
        )
      }),
      r
    )
  })(T),
  C = new T(i.BigInt(100))
function O(t) {
  return new U(t.numerator, t.denominator)
}
var w,
  U = (function (t) {
    function r() {
      var r
      return ((r = t.apply(this, arguments) || this).isPercent = !0), r
    }
    m(r, t)
    var n = r.prototype
    return (
      (n.add = function (r) {
        return O(t.prototype.add.call(this, r))
      }),
      (n.subtract = function (r) {
        return O(t.prototype.subtract.call(this, r))
      }),
      (n.multiply = function (r) {
        return O(t.prototype.multiply.call(this, r))
      }),
      (n.divide = function (r) {
        return O(t.prototype.divide.call(this, r))
      }),
      (n.toSignificant = function (r, n, e) {
        return void 0 === r && (r = 5), t.prototype.multiply.call(this, C).toSignificant(r, n, e)
      }),
      (n.toFixed = function (r, n, e) {
        return void 0 === r && (r = 2), t.prototype.multiply.call(this, C).toFixed(r, n, e)
      }),
      r
    )
  })(T),
  P = (function (t) {
    function r(r, n, e, o) {
      var a
      return (
        ((a = t.call(this, o, e) || this).baseCurrency = r),
        (a.quoteCurrency = n),
        (a.scalar = new T(
          i.exponentiate(i.BigInt(10), i.BigInt(r.decimals)),
          i.exponentiate(i.BigInt(10), i.BigInt(n.decimals))
        )),
        a
      )
    }
    m(r, t)
    var n = r.prototype
    return (
      (n.invert = function () {
        return new r(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)
      }),
      (n.multiply = function (n) {
        p(this.quoteCurrency, n.baseCurrency) || o(!1)
        var e = t.prototype.multiply.call(this, n)
        return new r(this.baseCurrency, n.quoteCurrency, e.denominator, e.numerator)
      }),
      (n.quote = function (r) {
        p(r.currency, this.baseCurrency) || o(!1)
        var n = t.prototype.multiply.call(this, r)
        return A.fromFractionalAmount(this.quoteCurrency, n.numerator, n.denominator)
      }),
      (n.toSignificant = function (t, r, n) {
        return void 0 === t && (t = 6), this.adjustedForDecimals.toSignificant(t, r, n)
      }),
      (n.toFixed = function (t, r, n) {
        return void 0 === t && (t = 4), this.adjustedForDecimals.toFixed(t, r, n)
      }),
      l(r, [
        {
          key: 'adjustedForDecimals',
          get: function () {
            return t.prototype.multiply.call(this, this.scalar)
          },
        },
      ]),
      r
    )
  })(T)
function _(t) {
  try {
    return c.getAddress(t)
  } catch (r) {
    throw new Error(t + ' is not a valid address.')
  }
}
var D = (function (t) {
    function r(r, n, e, i, o) {
      var a
      return (
        ((a = t.call(this, e, i, o) || this).isEther = !1), (a.isToken = !0), (a.chainId = r), (a.address = _(n)), a
      )
    }
    m(r, t)
    var n = r.prototype
    return (
      (n.equals = function (t) {
        return this === t || (this.chainId === t.chainId && this.address === t.address)
      }),
      (n.sortsBefore = function (t) {
        return (
          this.chainId !== t.chainId && o(!1),
          this.address === t.address && o(!1),
          this.address.toLowerCase() < t.address.toLowerCase()
        )
      }),
      r
    )
  })(h),
  b =
    (((w = {})[exports.ChainId.MAINNET] = new D(
      exports.ChainId.MAINNET,
      '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
      18,
      'WETH9',
      'Wrapped Ether'
    )),
    (w[exports.ChainId.ROPSTEN] = new D(
      exports.ChainId.ROPSTEN,
      '0xc778417E063141139Fce010982780140Aa0cD5Ab',
      18,
      'WETH9',
      'Wrapped Ether'
    )),
    (w[exports.ChainId.RINKEBY] = new D(
      exports.ChainId.RINKEBY,
      '0xc778417E063141139Fce010982780140Aa0cD5Ab',
      18,
      'WETH9',
      'Wrapped Ether'
    )),
    (w[exports.ChainId.GÖRLI] = new D(
      exports.ChainId.GÖRLI,
      '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',
      18,
      'WETH9',
      'Wrapped Ether'
    )),
    (w[exports.ChainId.KOVAN] = new D(
      exports.ChainId.KOVAN,
      '0xd0A1E359811322d97991E03f863a0C30C2cF029C',
      18,
      'WETH9',
      'Wrapped Ether'
    )),
    w),
  q = i.BigInt(Number.MAX_SAFE_INTEGER),
  S = i.BigInt(0),
  B = i.BigInt(1),
  H = i.BigInt(2)
function W(t, r) {
  if (t.isToken) return t.chainId !== r && o(!1), t
  if (t.isEther) return b[r]
  throw new Error('CURRENCY')
}
;(exports.CurrencyAmount = A),
  (exports.ETHER = x),
  (exports.Ether = y),
  (exports.Fraction = T),
  (exports.MaxUint256 = d),
  (exports.Percent = U),
  (exports.Price = P),
  (exports.Token = D),
  (exports.WETH9 = b),
  (exports.computePriceImpact = function (t, r, n) {
    var e = t.quote(r),
      i = e.subtract(n).divide(e)
    return new U(i.numerator, i.denominator)
  }),
  (exports.currencyEquals = p),
  (exports.sortedInsert = function (t, r, n, e) {
    if ((n > 0 || o(!1), t.length <= n || o(!1), 0 === t.length)) return t.push(r), null
    var i = t.length === n
    if (i && e(t[t.length - 1], r) <= 0) return r
    for (var a = 0, u = t.length; a < u; ) {
      var s = (a + u) >>> 1
      e(t[s], r) <= 0 ? (a = s + 1) : (u = s)
    }
    return t.splice(a, 0, r), i ? t.pop() : null
  }),
  (exports.sqrt = function (t) {
    if ((i.greaterThanOrEqual(t, S) || o(!1), i.lessThan(t, q))) return i.BigInt(Math.floor(Math.sqrt(i.toNumber(t))))
    var r, n
    for (r = t, n = i.add(i.divide(t, H), B); i.lessThan(n, r); ) (r = n), (n = i.divide(i.add(i.divide(t, n), n), H))
    return r
  }),
  (exports.validateAndParseAddress = _),
  (exports.wrappedCurrency = W),
  (exports.wrappedCurrencyAmount = function (t, r) {
    return A.fromFractionalAmount(W(t.currency, r), t.numerator, t.denominator)
  })
//# sourceMappingURL=sdk-core.cjs.production.min.js.map
