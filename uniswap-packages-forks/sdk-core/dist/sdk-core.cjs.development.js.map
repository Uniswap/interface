{"version":3,"file":"sdk-core.cjs.development.js","sources":["../src/constants.ts","../src/utils/currencyEquals.ts","../src/entities/baseCurrency.ts","../src/entities/ether.ts","../src/entities/pol.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts","../src/utils/wrappedCurrency.ts","../src/utils/wrappedCurrencyAmount.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | string | number\r\n\r\nexport enum ChainId {\r\n  MAINNET = 1,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÃ–RLI = 5,\r\n  KOVAN = 42,\r\n  POLYGON_AMOY = 80002,\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n","import { Currency } from '../entities/currency'\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA.isToken && currencyB.isToken) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA.isToken) {\r\n    return false\r\n  } else if (currencyB.isToken) {\r\n    return false\r\n  } else {\r\n    return currencyA.isEther === currencyB.isEther\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport abstract class BaseCurrency {\r\n  public abstract readonly isEther: boolean\r\n  public abstract readonly isToken: boolean\r\n\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n}\r\n","import { BaseCurrency } from './baseCurrency'\r\n\r\n/**\r\n * Represents the currency Ether\r\n */\r\nexport class Ether extends BaseCurrency {\r\n  public readonly isEther: true = true\r\n  public readonly isToken: false = false\r\n\r\n  /**\r\n   * Only called once by this class\r\n   * @protected\r\n   */\r\n  protected constructor() {\r\n    super(18, 'ETH', 'Ether')\r\n  }\r\n\r\n  /**\r\n   * The only instance of the class `Ether`.\r\n   */\r\n  public static readonly ETHER: Ether = new Ether()\r\n}\r\n\r\nexport const ETHER = Ether.ETHER\r\n","import { BaseCurrency } from './baseCurrency'\r\n\r\n/**\r\n * Represents the currency Pol\r\n */\r\nexport class Pol extends BaseCurrency {\r\n  public readonly isEther: true = true\r\n  public readonly isToken: false = false\r\n\r\n  /**\r\n   * Only called once by this class\r\n   * @protected\r\n   */\r\n  protected constructor() {\r\n    super(18, 'POL', 'Pol')\r\n  }\r\n\r\n  /**\r\n   * The only instance of the class `Pol`.\r\n   */\r\n  public static readonly POL: Pol = new Pol()\r\n}\r\n\r\nexport const POL = Pol.POL\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { currencyEquals } from '../../utils/currencyEquals'\r\nimport { Currency } from '../currency'\r\nimport { Ether } from '../ether'\r\nimport { Pol } from '../pol'\r\nimport { Fraction } from './fraction'\r\nimport _Big from 'big.js'\r\n\r\nimport toFormat from 'toformat'\r\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param rawAmount ether amount in wei\r\n   */\r\n  public static ether(rawAmount: BigintIsh): CurrencyAmount<Ether> {\r\n    return CurrencyAmount.fromRawAmount(Ether.ETHER, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Helper that calls the constructor with the POL currency\r\n   * @param rawAmount pol amount in wei\r\n   */\r\n  public static pol(rawAmount: BigintIsh): CurrencyAmount<Pol> {\r\n    return CurrencyAmount.fromRawAmount(Pol.POL, rawAmount)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(currencyEquals(this.currency, other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(currencyEquals(this.currency, other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport { currencyEquals } from '../../utils/currencyEquals'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\n\r\n/**\r\n * Validates an address and returns the parsed (checksummed) version of that address\r\n * @param address the unchecksummed hex address\r\n */\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    return getAddress(address)\r\n  } catch (error) {\r\n    throw new Error(`${address} is not a valid address.`)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\r\nimport { BaseCurrency } from './baseCurrency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends BaseCurrency {\r\n  public readonly isEther: false = false\r\n  public readonly isToken: true = true\r\n\r\n  public readonly chainId: ChainId | number\r\n  public readonly address: string\r\n\r\n  public constructor(chainId: ChainId | number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\nexport const WETH9: { [chainId in ChainId]: Token } = {\r\n  [ChainId.MAINNET]: new Token(\r\n    ChainId.MAINNET,\r\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.ROPSTEN]: new Token(\r\n    ChainId.ROPSTEN,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.RINKEBY]: new Token(\r\n    ChainId.RINKEBY,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH9', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH9', 'Wrapped Ether'),\r\n  [ChainId.POLYGON_AMOY]: new Token(\r\n    ChainId.POLYGON_AMOY,\r\n    '0xd7a19e388c52D3580B6428F29494883A5d40C330',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  )\r\n}\r\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\nconst ONE = JSBI.BigInt(1)\r\nconst TWO = JSBI.BigInt(2)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { Currency, Token, WETH9 } from '../entities'\r\n\r\n/**\r\n * Given a currency which can be Ether or a token, return wrapped ether for ether and the token for the token\r\n * @param currency the currency to wrap, if necessary\r\n * @param chainId the ID of the chain for wrapping\r\n */\r\nexport function wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency.isToken) {\r\n    invariant(currency.chainId === chainId, 'CHAIN_ID')\r\n    return currency\r\n  }\r\n  if (currency.isEther) return WETH9[chainId]\r\n  throw new Error('CURRENCY')\r\n}\r\n","import { ChainId } from '../constants'\r\nimport { Currency, CurrencyAmount, Token } from '../entities'\r\nimport { wrappedCurrency } from './wrappedCurrency'\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as a wrapped token amount.\r\n * In other words, if the currency is ETHER, returns the WETH9 token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nexport function wrappedCurrencyAmount(\r\n  currencyAmount: CurrencyAmount<Currency>,\r\n  chainId: ChainId\r\n): CurrencyAmount<Token> {\r\n  return CurrencyAmount.fromFractionalAmount(\r\n    wrappedCurrency(currencyAmount.currency, chainId),\r\n    currencyAmount.numerator,\r\n    currencyAmount.denominator\r\n  )\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","MaxUint256","JSBI","BigInt","currencyEquals","currencyA","currencyB","isToken","equals","isEther","BaseCurrency","decimals","symbol","name","Number","isInteger","invariant","Ether","ETHER","Pol","POL","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","ether","pol","added","subtracted","multiplied","divided","toExact","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","scalar","quote","currencyAmount","result","adjustedForDecimals","validateAndParseAddress","address","getAddress","error","Token","chainId","sortsBefore","toLowerCase","WETH9","MAINNET","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","POLYGON_AMOY","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","wrappedCurrency","wrappedCurrencyAmount"],"mappings":";;;;;;;;;;;;;AAKA,WAAYA;AACVA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,gCAAA,aAAA;AACAA,EAAAA,8BAAA,UAAA;AACAA,EAAAA,wCAAA,iBAAA;AACD,CAPD,EAAYA,eAAO,KAAPA,eAAO,KAAA,CAAnB;;AASA,WAAYC;AACVA,EAAAA,uCAAA,gBAAA;AACAA,EAAAA,wCAAA,iBAAA;AACD,CAHD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAKA,WAAYC;AACVA,EAAAA,oCAAA,eAAA;AACAA,EAAAA,uCAAA,kBAAA;AACAA,EAAAA,kCAAA,aAAA;AACD,CAJD,EAAYA,gBAAQ,KAARA,gBAAQ,KAAA,CAApB;;IAMaC,UAAU,gBAAGC,IAAI,CAACC,MAAL,CAAY,oEAAZ;;;;;;;;;;;;;;;;;;;;;;;;ACvB1B;;;AAGA,SAAgBC,eAAeC,WAAqBC;AAClD,MAAID,SAAS,CAACE,OAAV,IAAqBD,SAAS,CAACC,OAAnC,EAA4C;AAC1C,WAAOF,SAAS,CAACG,MAAV,CAAiBF,SAAjB,CAAP;AACD,GAFD,MAEO,IAAID,SAAS,CAACE,OAAd,EAAuB;AAC5B,WAAO,KAAP;AACD,GAFM,MAEA,IAAID,SAAS,CAACC,OAAd,EAAuB;AAC5B,WAAO,KAAP;AACD,GAFM,MAEA;AACL,WAAOF,SAAS,CAACI,OAAV,KAAsBH,SAAS,CAACG,OAAvC;AACD;AACF;;ACbD;;;;;;AAKA,IAAsBC,YAAtB;AAQE;;;;;;AAMA,sBAAsBC,QAAtB,EAAwCC,MAAxC,EAAyDC,IAAzD;AACE,IAAUF,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,GAAG,GAA5B,IAAmCG,MAAM,CAACC,SAAP,CAAiBJ,QAAjB,CAA7C,KAAAK,SAAS,QAAgE,UAAhE,CAAT,CAAA;AAEA,OAAKL,QAAL,GAAgBA,QAAhB;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACD,CApBH;;ACLA;;;;AAGA,IAAaI,KAAb;AAAA;;AAIE;;;;AAIA;;;AACE,qCAAM,EAAN,EAAU,KAAV,EAAiB,OAAjB;AARc,iBAAA,GAAgB,IAAhB;AACA,iBAAA,GAAiB,KAAjB;;AAQf;;AAVH;AAAA,EAA2BP,YAA3B;AAYE;;;;AAGuBO,WAAA,gBAAe,IAAIA,KAAJ,EAAf;AAGzB,IAAaC,KAAK,GAAGD,KAAK,CAACC,KAApB;;ACrBP;;;;AAGA,IAAaC,GAAb;AAAA;;AAIE;;;;AAIA;;;AACE,qCAAM,EAAN,EAAU,KAAV,EAAiB,KAAjB;AARc,iBAAA,GAAgB,IAAhB;AACA,iBAAA,GAAiB,KAAjB;;AAQf;;AAVH;AAAA,EAAyBT,YAAzB;AAYE;;;;AAGuBS,OAAA,gBAAW,IAAIA,GAAJ,EAAX;AAGzB,IAAaC,GAAG,GAAGD,GAAG,CAACC,GAAhB;;;ACfP,IAAMC,OAAO,gBAAGC,QAAQ,CAACC,QAAD,CAAxB;AACA,IAAMC,GAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAMC,qBAAqB,sDACxB1B,gBAAQ,CAAC2B,UADe,IACFN,OAAO,CAACM,UADN,wBAExB3B,gBAAQ,CAAC4B,aAFe,IAECP,OAAO,CAACO,aAFT,wBAGxB5B,gBAAQ,CAAC6B,QAHe,IAGJR,OAAO,CAACQ,QAHJ,wBAA3B;AAMA,IAAMC,eAAe,4CAClB9B,gBAAQ,CAAC2B,UADS,KAAA,mBAElB3B,gBAAQ,CAAC4B,aAFS,KAAA,mBAGlB5B,gBAAQ,CAAC6B,QAHS,KAAA,mBAArB;AAMA,IAAaE,QAAb;AAIE,oBAAmBC,SAAnB,EAAyCC,WAAzC;QAAyCA;AAAAA,MAAAA,cAAyB/B,IAAI,CAACC,MAAL,CAAY,CAAZ;;;AAChE,SAAK6B,SAAL,GAAiB9B,IAAI,CAACC,MAAL,CAAY6B,SAAZ,CAAjB;AACA,SAAKC,WAAL,GAAmB/B,IAAI,CAACC,MAAL,CAAY8B,WAAZ,CAAnB;AACD;;AAPH,WASiBC,gBATjB,GASU,0BAAwBC,WAAxB;AACN,QAAIA,WAAW,YAAYjC,IAAvB,IAA+B,OAAOiC,WAAP,KAAuB,QAAtD,IAAkE,OAAOA,WAAP,KAAuB,QAA7F,EACE,OAAO,IAAIJ,QAAJ,CAAaI,WAAb,CAAP;AAEF,QAAI,eAAeA,WAAf,IAA8B,iBAAiBA,WAAnD,EAAgE,OAAOA,WAAP;AAChE,UAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD,GAfH;AAAA;;AAAA;;AAAA,SA2BSC,MA3BT,GA2BS;AACL,WAAO,IAAIN,QAAJ,CAAa,KAAKE,WAAlB,EAA+B,KAAKD,SAApC,CAAP;AACD,GA7BH;;AAAA,SA+BSM,GA/BT,GA+BS,aAAIC,KAAJ;AACL,QAAMC,WAAW,GAAGT,QAAQ,CAACG,gBAAT,CAA0BK,KAA1B,CAApB;;AACA,QAAIrC,IAAI,CAACuC,KAAL,CAAW,KAAKR,WAAhB,EAA6BO,WAAW,CAACP,WAAzC,CAAJ,EAA2D;AACzD,aAAO,IAAIF,QAAJ,CAAa7B,IAAI,CAACoC,GAAL,CAAS,KAAKN,SAAd,EAAyBQ,WAAW,CAACR,SAArC,CAAb,EAA8D,KAAKC,WAAnE,CAAP;AACD;;AACD,WAAO,IAAIF,QAAJ,CACL7B,IAAI,CAACoC,GAAL,CACEpC,IAAI,CAACwC,QAAL,CAAc,KAAKV,SAAnB,EAA8BQ,WAAW,CAACP,WAA1C,CADF,EAEE/B,IAAI,CAACwC,QAAL,CAAcF,WAAW,CAACR,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKL/B,IAAI,CAACwC,QAAL,CAAc,KAAKT,WAAnB,EAAgCO,WAAW,CAACP,WAA5C,CALK,CAAP;AAOD,GA3CH;;AAAA,SA6CSU,QA7CT,GA6CS,kBAASJ,KAAT;AACL,QAAMC,WAAW,GAAGT,QAAQ,CAACG,gBAAT,CAA0BK,KAA1B,CAApB;;AACA,QAAIrC,IAAI,CAACuC,KAAL,CAAW,KAAKR,WAAhB,EAA6BO,WAAW,CAACP,WAAzC,CAAJ,EAA2D;AACzD,aAAO,IAAIF,QAAJ,CAAa7B,IAAI,CAACyC,QAAL,CAAc,KAAKX,SAAnB,EAA8BQ,WAAW,CAACR,SAA1C,CAAb,EAAmE,KAAKC,WAAxE,CAAP;AACD;;AACD,WAAO,IAAIF,QAAJ,CACL7B,IAAI,CAACyC,QAAL,CACEzC,IAAI,CAACwC,QAAL,CAAc,KAAKV,SAAnB,EAA8BQ,WAAW,CAACP,WAA1C,CADF,EAEE/B,IAAI,CAACwC,QAAL,CAAcF,WAAW,CAACR,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKL/B,IAAI,CAACwC,QAAL,CAAc,KAAKT,WAAnB,EAAgCO,WAAW,CAACP,WAA5C,CALK,CAAP;AAOD,GAzDH;;AAAA,SA2DSW,QA3DT,GA2DS,kBAASL,KAAT;AACL,QAAMC,WAAW,GAAGT,QAAQ,CAACG,gBAAT,CAA0BK,KAA1B,CAApB;AACA,WAAOrC,IAAI,CAAC0C,QAAL,CACL1C,IAAI,CAACwC,QAAL,CAAc,KAAKV,SAAnB,EAA8BQ,WAAW,CAACP,WAA1C,CADK,EAEL/B,IAAI,CAACwC,QAAL,CAAcF,WAAW,CAACR,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAjEH;;AAAA,SAmESY,OAnET,GAmES,iBAAQN,KAAR;AACL,QAAMC,WAAW,GAAGT,QAAQ,CAACG,gBAAT,CAA0BK,KAA1B,CAApB;AACA,WAAOrC,IAAI,CAACuC,KAAL,CACLvC,IAAI,CAACwC,QAAL,CAAc,KAAKV,SAAnB,EAA8BQ,WAAW,CAACP,WAA1C,CADK,EAEL/B,IAAI,CAACwC,QAAL,CAAcF,WAAW,CAACR,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAzEH;;AAAA,SA2ESa,WA3ET,GA2ES,qBAAYP,KAAZ;AACL,QAAMC,WAAW,GAAGT,QAAQ,CAACG,gBAAT,CAA0BK,KAA1B,CAApB;AACA,WAAOrC,IAAI,CAAC4C,WAAL,CACL5C,IAAI,CAACwC,QAAL,CAAc,KAAKV,SAAnB,EAA8BQ,WAAW,CAACP,WAA1C,CADK,EAEL/B,IAAI,CAACwC,QAAL,CAAcF,WAAW,CAACR,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAjFH;;AAAA,SAmFSS,QAnFT,GAmFS,kBAASH,KAAT;AACL,QAAMC,WAAW,GAAGT,QAAQ,CAACG,gBAAT,CAA0BK,KAA1B,CAApB;AACA,WAAO,IAAIR,QAAJ,CACL7B,IAAI,CAACwC,QAAL,CAAc,KAAKV,SAAnB,EAA8BQ,WAAW,CAACR,SAA1C,CADK,EAEL9B,IAAI,CAACwC,QAAL,CAAc,KAAKT,WAAnB,EAAgCO,WAAW,CAACP,WAA5C,CAFK,CAAP;AAID,GAzFH;;AAAA,SA2FSc,MA3FT,GA2FS,gBAAOR,KAAP;AACL,QAAMC,WAAW,GAAGT,QAAQ,CAACG,gBAAT,CAA0BK,KAA1B,CAApB;AACA,WAAO,IAAIR,QAAJ,CACL7B,IAAI,CAACwC,QAAL,CAAc,KAAKV,SAAnB,EAA8BQ,WAAW,CAACP,WAA1C,CADK,EAEL/B,IAAI,CAACwC,QAAL,CAAc,KAAKT,WAAnB,EAAgCO,WAAW,CAACR,SAA5C,CAFK,CAAP;AAID,GAjGH;;AAAA,SAmGSgB,aAnGT,GAmGS,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QAELD;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;QACjBD;AAAAA,MAAAA,WAAqBnD,gBAAQ,CAAC4B;;;AAE9B,KAAUd,MAAM,CAACC,SAAP,CAAiBkC,iBAAjB,CAAV,IAAAjC,SAAS,QAAyCiC,iBAAzC,yBAAT,CAAA;AACA,MAAUA,iBAAiB,GAAG,CAA9B,KAAAjC,SAAS,QAA2BiC,iBAA3B,uBAAT,CAAA;AAEA5B,IAAAA,OAAO,CAACgC,GAAR,CAAY;AAAEC,MAAAA,SAAS,EAAEL,iBAAiB,GAAG,CAAjC;AAAoCE,MAAAA,QAAQ,EAAEzB,qBAAqB,CAACyB,QAAD;AAAnE,KAAZ;AACA,QAAMI,QAAQ,GAAG,IAAIlC,OAAJ,CAAY,KAAKW,SAAL,CAAewB,QAAf,EAAZ,EACdC,GADc,CACV,KAAKxB,WAAL,CAAiBuB,QAAjB,EADU,EAEdE,mBAFc,CAEMT,iBAFN,CAAjB;AAGA,WAAOM,QAAQ,CAACjC,QAAT,CAAkBiC,QAAQ,CAACI,aAAT,EAAlB,EAA4CT,MAA5C,CAAP;AACD,GAhHH;;AAAA,SAkHSU,OAlHT,GAkHS,iBACLD,aADK,EAELT,MAFK,EAGLC,QAHK;QAELD;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;QACjBD;AAAAA,MAAAA,WAAqBnD,gBAAQ,CAAC4B;;;AAE9B,KAAUd,MAAM,CAACC,SAAP,CAAiB4C,aAAjB,CAAV,IAAA3C,SAAS,QAAqC2C,aAArC,yBAAT,CAAA;AACA,MAAUA,aAAa,IAAI,CAA3B,KAAA3C,SAAS,QAAwB2C,aAAxB,mBAAT,CAAA;AAEAnC,IAAAA,GAAG,CAACqC,EAAJ,GAASF,aAAT;AACAnC,IAAAA,GAAG,CAACsC,EAAJ,GAAShC,eAAe,CAACqB,QAAD,CAAxB;AACA,WAAO,IAAI3B,GAAJ,CAAQ,KAAKQ,SAAL,CAAewB,QAAf,EAAR,EAAmCC,GAAnC,CAAuC,KAAKxB,WAAL,CAAiBuB,QAAjB,EAAvC,EAAoElC,QAApE,CAA6EqC,aAA7E,EAA4FT,MAA5F,CAAP;AACD;AAED;;;AA/HF;;AAAA;AAAA;AAAA;AAmBI,aAAOhD,IAAI,CAAC6C,MAAL,CAAY,KAAKf,SAAjB,EAA4B,KAAKC,WAAjC,CAAP;AACD,KApBH;;AAAA;AAAA;AAAA;AAwBI,aAAO,IAAIF,QAAJ,CAAa7B,IAAI,CAAC6D,SAAL,CAAe,KAAK/B,SAApB,EAA+B,KAAKC,WAApC,CAAb,EAA+D,KAAKA,WAApE,CAAP;AACD;AAzBH;AAAA;AAAA;AAmII,aAAO,IAAIF,QAAJ,CAAa,KAAKC,SAAlB,EAA6B,KAAKC,WAAlC,CAAP;AACD;AApIH;;AAAA;AAAA;;ACXA,IAAMT,KAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAauC,cAAb;AAAA;;AA2CE,0BAAsBC,QAAtB,EAAmCjC,SAAnC,EAAyDC,WAAzD;;;AACE,iCAAMD,SAAN,EAAiBC,WAAjB;AACA,KAAU/B,IAAI,CAACgE,eAAL,CAAqB,MAAKX,QAA1B,EAAoCtD,UAApC,CAAV,IAAAe,SAAS,QAAkD,QAAlD,CAAT,CAAA;AACA,UAAKiD,QAAL,GAAgBA,QAAhB;AACA,UAAKE,YAAL,GAAoBjE,IAAI,CAACkE,YAAL,CAAkBlE,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAlB,EAAmCD,IAAI,CAACC,MAAL,CAAY8D,QAAQ,CAACtD,QAArB,CAAnC,CAApB;;AACD;AA5CD;;;;;;;AAJF,iBASgB0D,aAThB,GASS,uBAAyCJ,QAAzC,EAAsDK,SAAtD;AACL,WAAO,IAAIN,cAAJ,CAAmBC,QAAnB,EAA6BK,SAA7B,CAAP;AACD;AAED;;;;;;AAbF;;AAAA,iBAmBgBC,oBAnBhB,GAmBS,8BACLN,QADK,EAELjC,SAFK,EAGLC,WAHK;AAKL,WAAO,IAAI+B,cAAJ,CAAmBC,QAAnB,EAA6BjC,SAA7B,EAAwCC,WAAxC,CAAP;AACD;AAED;;;;AA3BF;;AAAA,iBA+BgBuC,KA/BhB,GA+BS,eAAaF,SAAb;AACL,WAAON,cAAc,CAACK,aAAf,CAA6BpD,KAAK,CAACC,KAAnC,EAA0CoD,SAA1C,CAAP;AACD;AAED;;;;AAnCF;;AAAA,iBAuCgBG,GAvChB,GAuCS,aAAWH,SAAX;AACL,WAAON,cAAc,CAACK,aAAf,CAA6BlD,GAAG,CAACC,GAAjC,EAAsCkD,SAAtC,CAAP;AACD,GAzCH;;AAAA;;AAAA,SAkDShC,GAlDT,GAkDS,aAAIC,KAAJ;AACL,KAAUnC,cAAc,CAAC,KAAK6D,QAAN,EAAgB1B,KAAK,CAAC0B,QAAtB,CAAxB,IAAAjD,SAAS,QAAgD,UAAhD,CAAT,CAAA;;AACA,QAAM0D,KAAK,uBAASpC,GAAT,YAAaC,KAAb,CAAX;;AACA,WAAOyB,cAAc,CAACO,oBAAf,CAAoC,KAAKN,QAAzC,EAAmDS,KAAK,CAAC1C,SAAzD,EAAoE0C,KAAK,CAACzC,WAA1E,CAAP;AACD,GAtDH;;AAAA,SAwDSU,QAxDT,GAwDS,kBAASJ,KAAT;AACL,KAAUnC,cAAc,CAAC,KAAK6D,QAAN,EAAgB1B,KAAK,CAAC0B,QAAtB,CAAxB,IAAAjD,SAAS,QAAgD,UAAhD,CAAT,CAAA;;AACA,QAAM2D,UAAU,uBAAShC,QAAT,YAAkBJ,KAAlB,CAAhB;;AACA,WAAOyB,cAAc,CAACO,oBAAf,CAAoC,KAAKN,QAAzC,EAAmDU,UAAU,CAAC3C,SAA9D,EAAyE2C,UAAU,CAAC1C,WAApF,CAAP;AACD,GA5DH;;AAAA,SA8DSS,QA9DT,GA8DS,kBAASH,KAAT;AACL,QAAMqC,UAAU,uBAASlC,QAAT,YAAkBH,KAAlB,CAAhB;;AACA,WAAOyB,cAAc,CAACO,oBAAf,CAAoC,KAAKN,QAAzC,EAAmDW,UAAU,CAAC5C,SAA9D,EAAyE4C,UAAU,CAAC3C,WAApF,CAAP;AACD,GAjEH;;AAAA,SAmESc,MAnET,GAmES,gBAAOR,KAAP;AACL,QAAMsC,OAAO,uBAAS9B,MAAT,YAAgBR,KAAhB,CAAb;;AACA,WAAOyB,cAAc,CAACO,oBAAf,CAAoC,KAAKN,QAAzC,EAAmDY,OAAO,CAAC7C,SAA3D,EAAsE6C,OAAO,CAAC5C,WAA9E,CAAP;AACD,GAtEH;;AAAA,SAwESe,aAxET,GAwES,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QACLF;AAAAA,MAAAA,oBAA4B;;;QAE5BE;AAAAA,MAAAA,WAAqBnD,gBAAQ,CAAC2B;;;AAE9B,WAAO,oBAAMoB,MAAN,YAAa,KAAKoB,YAAlB,EAAgCnB,aAAhC,CAA8CC,iBAA9C,EAAiEC,MAAjE,EAAyEC,QAAzE,CAAP;AACD,GA9EH;;AAAA,SAgFSS,OAhFT,GAgFS,iBACLD,aADK,EAELT,MAFK,EAGLC,QAHK;QACLQ;AAAAA,MAAAA,gBAAwB,KAAKM,QAAL,CAActD;;;QAEtCwC;AAAAA,MAAAA,WAAqBnD,gBAAQ,CAAC2B;;;AAE9B,MAAUgC,aAAa,IAAI,KAAKM,QAAL,CAActD,QAAzC,KAAAK,SAAS,QAA0C,UAA1C,CAAT,CAAA;AACA,WAAO,oBAAM+B,MAAN,YAAa,KAAKoB,YAAlB,EAAgCP,OAAhC,CAAwCD,aAAxC,EAAuDT,MAAvD,EAA+DC,QAA/D,CAAP;AACD,GAvFH;;AAAA,SAyFS2B,OAzFT,GAyFS,iBAAQ5B,MAAR;QAAQA;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;AAC9B5B,IAAAA,KAAG,CAACqC,EAAJ,GAAS,KAAKI,QAAL,CAActD,QAAvB;AACA,WAAO,IAAIa,KAAJ,CAAQ,KAAK+B,QAAL,CAAcC,QAAd,EAAR,EAAkCC,GAAlC,CAAsC,KAAKU,YAAL,CAAkBX,QAAlB,EAAtC,EAAoElC,QAApE,CAA6E4B,MAA7E,CAAP;AACD,GA5FH;;AAAA;AAAA,EAAwDnB,QAAxD;;ACVA,IAAMgD,WAAW,gBAAG,IAAIhD,QAAJ,eAAa7B,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb,CAApB;AAEA;;;;;AAIA,SAAS6E,SAAT,CAAmBC,QAAnB;AACE,SAAO,IAAIC,OAAJ,CAAYD,QAAQ,CAACjD,SAArB,EAAgCiD,QAAQ,CAAChD,WAAzC,CAAP;AACD;;AAED,IAAaiD,OAAb;AAAA;;AAAA;;;;AACE;;;;AAGgB,mBAAA,GAAkB,IAAlB;;AAyBjB;;AA7BD;;AAAA,SAME5C,GANF,GAME,aAAIC,KAAJ;AACE,WAAOyC,SAAS,qBAAO1C,GAAP,YAAWC,KAAX,EAAhB;AACD,GARH;;AAAA,SAUEI,QAVF,GAUE,kBAASJ,KAAT;AACE,WAAOyC,SAAS,qBAAOrC,QAAP,YAAgBJ,KAAhB,EAAhB;AACD,GAZH;;AAAA,SAcEG,QAdF,GAcE,kBAASH,KAAT;AACE,WAAOyC,SAAS,qBAAOtC,QAAP,YAAgBH,KAAhB,EAAhB;AACD,GAhBH;;AAAA,SAkBEQ,MAlBF,GAkBE,gBAAOR,KAAP;AACE,WAAOyC,SAAS,qBAAOjC,MAAP,YAAcR,KAAd,EAAhB;AACD,GApBH;;AAAA,SAsBSS,aAtBT,GAsBS,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;AAAAA,MAAAA,oBAA4B;;;AAC/C,WAAO,oBAAMP,QAAN,YAAeqC,WAAf,EAA4B/B,aAA5B,CAA0CC,iBAA1C,EAA6DC,MAA7D,EAAqEC,QAArE,CAAP;AACD,GAxBH;;AAAA,SA0BSS,OA1BT,GA0BS,iBAAQD,aAAR,EAAmCT,MAAnC,EAAoDC,QAApD;QAAQQ;AAAAA,MAAAA,gBAAwB;;;AACrC,WAAO,oBAAMjB,QAAN,YAAeqC,WAAf,EAA4BnB,OAA5B,CAAoCD,aAApC,EAAmDT,MAAnD,EAA2DC,QAA3D,CAAP;AACD,GA5BH;;AAAA;AAAA,EAA6BpB,QAA7B;;ICLaoD,KAAb;AAAA;;AAKE;AACA,iBAAmBC,YAAnB,EAAwCC,aAAxC,EAA+DpD,WAA/D,EAAuFD,SAAvF;;;AACE,iCAAMA,SAAN,EAAiBC,WAAjB;AAEA,UAAKmD,YAAL,GAAoBA,YAApB;AACA,UAAKC,aAAL,GAAqBA,aAArB;AACA,UAAKC,MAAL,GAAc,IAAIvD,QAAJ,CACZ7B,IAAI,CAACkE,YAAL,CAAkBlE,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAlB,EAAmCD,IAAI,CAACC,MAAL,CAAYiF,YAAY,CAACzE,QAAzB,CAAnC,CADY,EAEZT,IAAI,CAACkE,YAAL,CAAkBlE,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAlB,EAAmCD,IAAI,CAACC,MAAL,CAAYkF,aAAa,CAAC1E,QAA1B,CAAnC,CAFY,CAAd;;AAID;AAED;;;;;AAjBF;;AAAA,SAoBS0B,MApBT,GAoBS;AACL,WAAO,IAAI8C,KAAJ,CAAU,KAAKE,aAAf,EAA8B,KAAKD,YAAnC,EAAiD,KAAKpD,SAAtD,EAAiE,KAAKC,WAAtE,CAAP;AACD;AAED;;;;AAxBF;;AAAA,SA4BSS,QA5BT,GA4BS,kBAAuCH,KAAvC;AACL,KAAUnC,cAAc,CAAC,KAAKiF,aAAN,EAAqB9C,KAAK,CAAC6C,YAA3B,CAAxB,IAAApE,SAAS,QAAyD,OAAzD,CAAT,CAAA;;AACA,QAAMiE,QAAQ,uBAASvC,QAAT,YAAkBH,KAAlB,CAAd;;AACA,WAAO,IAAI4C,KAAJ,CAAU,KAAKC,YAAf,EAA6B7C,KAAK,CAAC8C,aAAnC,EAAkDJ,QAAQ,CAAChD,WAA3D,EAAwEgD,QAAQ,CAACjD,SAAjF,CAAP;AACD;AAED;;;;AAlCF;;AAAA,SAsCSuD,KAtCT,GAsCS,eAAMC,cAAN;AACL,KAAUpF,cAAc,CAACoF,cAAc,CAACvB,QAAhB,EAA0B,KAAKmB,YAA/B,CAAxB,IAAApE,SAAS,QAA6D,OAA7D,CAAT,CAAA;;AACA,QAAMyE,MAAM,uBAAS/C,QAAT,YAAkB8C,cAAlB,CAAZ;;AACA,WAAOxB,cAAc,CAACO,oBAAf,CAAoC,KAAKc,aAAzC,EAAwDI,MAAM,CAACzD,SAA/D,EAA0EyD,MAAM,CAACxD,WAAjF,CAAP;AACD;AAED;;;;AA5CF;;AAAA,SAoDSe,aApDT,GAoDS,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;AAAAA,MAAAA,oBAA4B;;;AAC/C,WAAO,KAAKyC,mBAAL,CAAyB1C,aAAzB,CAAuCC,iBAAvC,EAA0DC,MAA1D,EAAkEC,QAAlE,CAAP;AACD,GAtDH;;AAAA,SAwDSS,OAxDT,GAwDS,iBAAQD,aAAR,EAAmCT,MAAnC,EAAoDC,QAApD;QAAQQ;AAAAA,MAAAA,gBAAwB;;;AACrC,WAAO,KAAK+B,mBAAL,CAAyB9B,OAAzB,CAAiCD,aAAjC,EAAgDT,MAAhD,EAAwDC,QAAxD,CAAP;AACD,GA1DH;;AAAA;AAAA;AAAA;AAiDI,iCAAaT,QAAb,YAAsB,KAAK4C,MAA3B;AACD;AAlDH;;AAAA;AAAA,EAA4EvD,QAA5E;;ACPA;;;;;AAIA,SAAgB4D,wBAAwBC;AACtC,MAAI;AACF,WAAOC,kBAAU,CAACD,SAAD,CAAjB;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,UAAM,IAAI1D,KAAJ,CAAawD,SAAb,8BAAN;AACD;AACF;;;ACPD;;;;AAGA,IAAaG,KAAb;AAAA;;AAOE,iBAAmBC,OAAnB,EAA8CJ,OAA9C,EAA+DjF,QAA/D,EAAiFC,MAAjF,EAAkGC,IAAlG;;;AACE,qCAAMF,QAAN,EAAgBC,MAAhB,EAAwBC,IAAxB;AAPc,iBAAA,GAAiB,KAAjB;AACA,iBAAA,GAAgB,IAAhB;AAOd,UAAKmF,OAAL,GAAeA,OAAf;AACA,UAAKJ,OAAL,GAAeD,uBAAuB,CAACC,OAAD,CAAtC;;AACD;AAED;;;;;;AAbF;;AAAA,SAiBSpF,MAjBT,GAiBS,gBAAO+B,KAAP;AACL;AACA,QAAI,SAASA,KAAb,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,WAAO,KAAKyD,OAAL,KAAiBzD,KAAK,CAACyD,OAAvB,IAAkC,KAAKJ,OAAL,KAAiBrD,KAAK,CAACqD,OAAhE;AACD;AAED;;;;;;AAzBF;;AAAA,SA+BSK,WA/BT,GA+BS,qBAAY1D,KAAZ;AACL,MAAU,KAAKyD,OAAL,KAAiBzD,KAAK,CAACyD,OAAjC,KAAAhF,SAAS,QAAiC,WAAjC,CAAT,CAAA;AACA,MAAU,KAAK4E,OAAL,KAAiBrD,KAAK,CAACqD,OAAjC,KAAA5E,SAAS,QAAiC,WAAjC,CAAT,CAAA;AACA,WAAO,KAAK4E,OAAL,CAAaM,WAAb,KAA6B3D,KAAK,CAACqD,OAAN,CAAcM,WAAd,EAApC;AACD,GAnCH;;AAAA;AAAA,EAA2BxF,YAA3B;AAsCA,IAAayF,KAAK,sBACfrG,eAAO,CAACsG,OADO,iBACG,IAAIL,KAAJ,CACjBjG,eAAO,CAACsG,OADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,OAJiB,EAKjB,eALiB,CADH,QAQftG,eAAO,CAACuG,OARO,iBAQG,IAAIN,KAAJ,CACjBjG,eAAO,CAACuG,OADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,OAJiB,EAKjB,eALiB,CARH,QAefvG,eAAO,CAACwG,OAfO,iBAeG,IAAIP,KAAJ,CACjBjG,eAAO,CAACwG,OADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,OAJiB,EAKjB,eALiB,CAfH,QAsBfxG,eAAO,CAACyG,KAtBO,iBAsBC,IAAIR,KAAJ,CAAUjG,eAAO,CAACyG,KAAlB,EAAyB,4CAAzB,EAAuE,EAAvE,EAA2E,OAA3E,EAAoF,eAApF,CAtBD,QAuBfzG,eAAO,CAAC0G,KAvBO,iBAuBC,IAAIT,KAAJ,CAAUjG,eAAO,CAAC0G,KAAlB,EAAyB,4CAAzB,EAAuE,EAAvE,EAA2E,OAA3E,EAAoF,eAApF,CAvBD,QAwBf1G,eAAO,CAAC2G,YAxBO,iBAwBQ,IAAIV,KAAJ,CACtBjG,eAAO,CAAC2G,YADc,EAEtB,4CAFsB,EAGtB,EAHsB,EAItB,OAJsB,EAKtB,eALsB,CAxBR,QAAX;;AC5CP;;;;;;;AAMA,SAAgBC,mBACdC,UACAC,aACAC;AAEA,MAAMC,kBAAkB,GAAGH,QAAQ,CAACpB,KAAT,CAAeqB,WAAf,CAA3B;;AAEA,MAAMG,WAAW,GAAGD,kBAAkB,CAACnE,QAAnB,CAA4BkE,YAA5B,EAA0C9D,MAA1C,CAAiD+D,kBAAjD,CAApB;AACA,SAAO,IAAI5B,OAAJ,CAAY6B,WAAW,CAAC/E,SAAxB,EAAmC+E,WAAW,CAAC9E,WAA/C,CAAP;AACD;;ACdD;;AACA,SAAgB+E,aAAgBC,OAAY3E,KAAQ4E,SAAiBC;AACnE,IAAUD,OAAO,GAAG,CAApB,KAAAlG,SAAS,QAAc,eAAd,CAAT,CAAA;;AAEA,IAAUiG,KAAK,CAACG,MAAN,IAAgBF,OAA1B,KAAAlG,SAAS,QAA0B,YAA1B,CAAT,CAAA;;AAGA,MAAIiG,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AACtBH,IAAAA,KAAK,CAACI,IAAN,CAAW/E,GAAX;AACA,WAAO,IAAP;AACD,GAHD,MAGO;AACL,QAAMgF,MAAM,GAAGL,KAAK,CAACG,MAAN,KAAiBF,OAAhC,CADK;;AAGL,QAAII,MAAM,IAAIH,UAAU,CAACF,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAN,EAA0B9E,GAA1B,CAAV,IAA4C,CAA1D,EAA6D;AAC3D,aAAOA,GAAP;AACD;;AAED,QAAIiF,EAAE,GAAG,CAAT;AAAA,QACEC,EAAE,GAAGP,KAAK,CAACG,MADb;;AAGA,WAAOG,EAAE,GAAGC,EAAZ,EAAgB;AACd,UAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAN,KAAc,CAA1B;;AACA,UAAIL,UAAU,CAACF,KAAK,CAACQ,GAAD,CAAN,EAAanF,GAAb,CAAV,IAA+B,CAAnC,EAAsC;AACpCiF,QAAAA,EAAE,GAAGE,GAAG,GAAG,CAAX;AACD,OAFD,MAEO;AACLD,QAAAA,EAAE,GAAGC,GAAL;AACD;AACF;;AACDR,IAAAA,KAAK,CAACS,MAAN,CAAaH,EAAb,EAAiB,CAAjB,EAAoBjF,GAApB;AACA,WAAOgF,MAAM,GAAGL,KAAK,CAACU,GAAN,EAAH,GAAkB,IAA/B;AACD;AACF;;AC/BM,IAAMC,gBAAgB,gBAAG1H,IAAI,CAACC,MAAL,CAAYW,MAAM,CAAC8G,gBAAnB,CAAzB;AAEP,IAAMC,IAAI,gBAAG3H,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACA,IAAM2H,GAAG,gBAAG5H,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AACA,IAAM4H,GAAG,gBAAG7H,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AAEA;;;;;AAIA,SAAgB6H,KAAKC;AACnB,GAAU/H,IAAI,CAACgI,kBAAL,CAAwBD,KAAxB,EAA+BJ,IAA/B,CAAV,IAAA7G,SAAS,QAAuC,UAAvC,CAAT,CAAA;;AAGA,MAAId,IAAI,CAAC0C,QAAL,CAAcqF,KAAd,EAAqBL,gBAArB,CAAJ,EAA4C;AAC1C,WAAO1H,IAAI,CAACC,MAAL,CAAYgI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACH,IAAL,CAAU9H,IAAI,CAACmI,QAAL,CAAcJ,KAAd,CAAV,CAAX,CAAZ,CAAP;AACD;;AAED,MAAIK,CAAJ;AACA,MAAIC,CAAJ;AACAD,EAAAA,CAAC,GAAGL,KAAJ;AACAM,EAAAA,CAAC,GAAGrI,IAAI,CAACoC,GAAL,CAASpC,IAAI,CAAC6C,MAAL,CAAYkF,KAAZ,EAAmBF,GAAnB,CAAT,EAAkCD,GAAlC,CAAJ;;AACA,SAAO5H,IAAI,CAAC0C,QAAL,CAAc2F,CAAd,EAAiBD,CAAjB,CAAP,EAA4B;AAC1BA,IAAAA,CAAC,GAAGC,CAAJ;AACAA,IAAAA,CAAC,GAAGrI,IAAI,CAAC6C,MAAL,CAAY7C,IAAI,CAACoC,GAAL,CAASpC,IAAI,CAAC6C,MAAL,CAAYkF,KAAZ,EAAmBM,CAAnB,CAAT,EAAgCA,CAAhC,CAAZ,EAAgDR,GAAhD,CAAJ;AACD;;AACD,SAAOO,CAAP;AACD;;AC1BD;;;;;;AAKA,SAAgBE,gBAAgBvE,UAAoB+B;AAClD,MAAI/B,QAAQ,CAAC1D,OAAb,EAAsB;AACpB,MAAU0D,QAAQ,CAAC+B,OAAT,KAAqBA,OAA/B,KAAAhF,SAAS,QAA+B,UAA/B,CAAT,CAAA;AACA,WAAOiD,QAAP;AACD;;AACD,MAAIA,QAAQ,CAACxD,OAAb,EAAsB,OAAO0F,KAAK,CAACH,OAAD,CAAZ;AACtB,QAAM,IAAI5D,KAAJ,CAAU,UAAV,CAAN;AACD;;ACZD;;;;;;AAKA,SAAgBqG,sBACdjD,gBACAQ;AAEA,SAAOhC,cAAc,CAACO,oBAAf,CACLiE,eAAe,CAAChD,cAAc,CAACvB,QAAhB,EAA0B+B,OAA1B,CADV,EAELR,cAAc,CAACxD,SAFV,EAGLwD,cAAc,CAACvD,WAHV,CAAP;AAKD;;;;;;;;;;;;;;;;;;;;;"}