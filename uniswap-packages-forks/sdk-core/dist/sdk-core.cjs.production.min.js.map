{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/constants.ts","../src/utils/currencyEquals.ts","../src/entities/baseCurrency.ts","../src/entities/ether.ts","../src/entities/pol.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/utils/sqrt.ts","../src/utils/wrappedCurrency.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/wrappedCurrencyAmount.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | string | number\r\n\r\nexport enum ChainId {\r\n  MAINNET = 1,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÃ–RLI = 5,\r\n  KOVAN = 42,\r\n  POLYGON_AMOY = 80002,\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n","import { Currency } from '../entities/currency'\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA.isToken && currencyB.isToken) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA.isToken) {\r\n    return false\r\n  } else if (currencyB.isToken) {\r\n    return false\r\n  } else {\r\n    return currencyA.isEther === currencyB.isEther\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport abstract class BaseCurrency {\r\n  public abstract readonly isEther: boolean\r\n  public abstract readonly isToken: boolean\r\n\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n}\r\n","import { BaseCurrency } from './baseCurrency'\r\n\r\n/**\r\n * Represents the currency Ether\r\n */\r\nexport class Ether extends BaseCurrency {\r\n  public readonly isEther: true = true\r\n  public readonly isToken: false = false\r\n\r\n  /**\r\n   * Only called once by this class\r\n   * @protected\r\n   */\r\n  protected constructor() {\r\n    super(18, 'ETH', 'Ether')\r\n  }\r\n\r\n  /**\r\n   * The only instance of the class `Ether`.\r\n   */\r\n  public static readonly ETHER: Ether = new Ether()\r\n}\r\n\r\nexport const ETHER = Ether.ETHER\r\n","import { BaseCurrency } from './baseCurrency'\r\n\r\n/**\r\n * Represents the currency Pol\r\n */\r\nexport class Pol extends BaseCurrency {\r\n  public readonly isEther: true = true\r\n  public readonly isToken: false = false\r\n\r\n  /**\r\n   * Only called once by this class\r\n   * @protected\r\n   */\r\n  protected constructor() {\r\n    super(18, 'POL', 'Pol')\r\n  }\r\n\r\n  /**\r\n   * The only instance of the class `Pol`.\r\n   */\r\n  public static readonly POL: Pol = new Pol()\r\n}\r\n\r\nexport const POL = Pol.POL\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { currencyEquals } from '../../utils/currencyEquals'\r\nimport { Currency } from '../currency'\r\nimport { Ether } from '../ether'\r\nimport { Pol } from '../pol'\r\nimport { Fraction } from './fraction'\r\nimport _Big from 'big.js'\r\n\r\nimport toFormat from 'toformat'\r\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param rawAmount ether amount in wei\r\n   */\r\n  public static ether(rawAmount: BigintIsh): CurrencyAmount<Ether> {\r\n    return CurrencyAmount.fromRawAmount(Ether.ETHER, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Helper that calls the constructor with the POL currency\r\n   * @param rawAmount pol amount in wei\r\n   */\r\n  public static pol(rawAmount: BigintIsh): CurrencyAmount<Pol> {\r\n    return CurrencyAmount.fromRawAmount(Pol.POL, rawAmount)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(currencyEquals(this.currency, other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(currencyEquals(this.currency, other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport { currencyEquals } from '../../utils/currencyEquals'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\n\r\n/**\r\n * Validates an address and returns the parsed (checksummed) version of that address\r\n * @param address the unchecksummed hex address\r\n */\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    return getAddress(address)\r\n  } catch (error) {\r\n    throw new Error(`${address} is not a valid address.`)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\r\nimport { BaseCurrency } from './baseCurrency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends BaseCurrency {\r\n  public readonly isEther: false = false\r\n  public readonly isToken: true = true\r\n\r\n  public readonly chainId: ChainId | number\r\n  public readonly address: string\r\n\r\n  public constructor(chainId: ChainId | number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\nexport const WETH9: { [chainId in ChainId]: Token } = {\r\n  [ChainId.MAINNET]: new Token(\r\n    ChainId.MAINNET,\r\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.ROPSTEN]: new Token(\r\n    ChainId.ROPSTEN,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.RINKEBY]: new Token(\r\n    ChainId.RINKEBY,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH9', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH9', 'Wrapped Ether'),\r\n  [ChainId.POLYGON_AMOY]: new Token(\r\n    ChainId.POLYGON_AMOY,\r\n    '0xd7a19e388c52D3580B6428F29494883A5d40C330',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  )\r\n}\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\nconst ONE = JSBI.BigInt(1)\r\nconst TWO = JSBI.BigInt(2)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { Currency, Token, WETH9 } from '../entities'\r\n\r\n/**\r\n * Given a currency which can be Ether or a token, return wrapped ether for ether and the token for the token\r\n * @param currency the currency to wrap, if necessary\r\n * @param chainId the ID of the chain for wrapping\r\n */\r\nexport function wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency.isToken) {\r\n    invariant(currency.chainId === chainId, 'CHAIN_ID')\r\n    return currency\r\n  }\r\n  if (currency.isEther) return WETH9[chainId]\r\n  throw new Error('CURRENCY')\r\n}\r\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import { ChainId } from '../constants'\r\nimport { Currency, CurrencyAmount, Token } from '../entities'\r\nimport { wrappedCurrency } from './wrappedCurrency'\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as a wrapped token amount.\r\n * In other words, if the currency is ETHER, returns the WETH9 token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nexport function wrappedCurrencyAmount(\r\n  currencyAmount: CurrencyAmount<Currency>,\r\n  chainId: ChainId\r\n): CurrencyAmount<Token> {\r\n  return CurrencyAmount.fromFractionalAmount(\r\n    wrappedCurrency(currencyAmount.currency, chainId),\r\n    currencyAmount.numerator,\r\n    currencyAmount.denominator\r\n  )\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","MaxUint256","JSBI","BigInt","currencyEquals","currencyA","currencyB","isToken","equals","isEther","BaseCurrency","decimals","symbol","name","Number","isInteger","invariant","Ether","ETHER","Pol","POL","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","this","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","_this","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","ether","pol","added","subtracted","multiplied","divided","_Fraction","toExact","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","scalar","quote","currencyAmount","result","adjustedForDecimals","validateAndParseAddress","address","getAddress","error","Token","chainId","sortsBefore","toLowerCase","WETH9","MAINNET","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","POLYGON_AMOY","MAX_SAFE_INTEGER","ZERO","ONE","TWO","wrappedCurrency","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}