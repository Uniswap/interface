{"version":3,"file":"v2-sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../../../sdk-core/src/constants.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, ChainId, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId | number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId, Currency, Price, Token, wrappedCurrency } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: ChainId | number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = wrappedCurrency(input, chainId)\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(\n      typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(wrappedCurrency(output, chainId)),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): ChainId | number {\n    return this.pairs[0].chainId\n  }\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import {\n  ChainId,\n  Currency,\n  CurrencyAmount,\n  currencyEquals,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  wrappedCurrency,\n  TradeType,\n  wrappedCurrencyAmount\n} from '@uniswap/sdk-core'\nimport { computePriceImpact, Token } from '../../../../sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      tokenAmounts[0] = wrappedCurrencyAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = wrappedCurrencyAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined = nextAmountIn.currency.isToken\n      ? nextAmountIn.currency.chainId\n      : currencyOut.isToken\n      ? (currencyOut as Token).chainId\n      : undefined\n\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedCurrencyAmount(nextAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!currencyEquals(pair.token0, amountIn.currency) && !currencyEquals(pair.token1, amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (currencyEquals(amountOut.currency, tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined = nextAmountOut.currency.isToken\n      ? nextAmountOut.currency.chainId\n      : currencyIn.isToken\n      ? (currencyIn as Token).chainId\n      : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedCurrencyAmount(nextAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!currencyEquals(pair.token0, amountOut.currency) && !currencyEquals(pair.token1, amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (currencyEquals(amountIn.currency, tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from 'entities'\nimport invariant from 'tiny-invariant'\nimport { Token } from '../../../sdk-core'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isEther\n    const etherOut = trade.outputAmount.currency.isEther\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","computePairAddress","factoryAddress","tokenA","tokenB","sortsBefore","token0","token1","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","chainId","getAddress","involvesToken","token","equals","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrappedCurrency","path","entries","i","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","ChainId","TradeType","inputOutputComparator","a","b","currencyEquals","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","EXACT_INPUT","wrappedCurrencyAmount","fromFractionalAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","isToken","undefined","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isEther","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","value"],"mappings":"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"}