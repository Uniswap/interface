{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../../../sdk-core/src/constants.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, ChainId, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId | number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId, Currency, Price, Token, wrappedCurrency } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: ChainId | number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = wrappedCurrency(input, chainId)\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(\n      typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(wrappedCurrency(output, chainId)),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): ChainId | number {\n    return this.pairs[0].chainId\n  }\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import {\n  ChainId,\n  Currency,\n  CurrencyAmount,\n  currencyEquals,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  wrappedCurrency,\n  TradeType,\n  wrappedCurrencyAmount\n} from '@uniswap/sdk-core'\nimport { computePriceImpact, Token } from '../../../../sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      tokenAmounts[0] = wrappedCurrencyAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = wrappedCurrencyAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined = nextAmountIn.currency.isToken\n      ? nextAmountIn.currency.chainId\n      : currencyOut.isToken\n      ? (currencyOut as Token).chainId\n      : undefined\n\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedCurrencyAmount(nextAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!currencyEquals(pair.token0, amountIn.currency) && !currencyEquals(pair.token1, amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (currencyEquals(amountOut.currency, tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined = nextAmountOut.currency.isToken\n      ? nextAmountOut.currency.chainId\n      : currencyIn.isToken\n      ? (currencyIn as Token).chainId\n      : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedCurrencyAmount(nextAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!currencyEquals(pair.token0, amountOut.currency) && !currencyEquals(pair.token1, amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (currencyEquals(amountIn.currency, tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from 'entities'\nimport invariant from 'tiny-invariant'\nimport { Token } from '../../../sdk-core'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isEther\n    const etherOut = trade.outputAmount.currency.isEther\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","computePairAddress","factoryAddress","tokenA","tokenB","sortsBefore","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","chainId","getAddress","involvesToken","token","equals","this","token0","token1","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrappedCurrency","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","ChainId","TradeType","inputOutputComparator","a","b","currencyEquals","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","EXACT_INPUT","wrappedCurrencyAmount","i","fromFractionalAmount","executionPrice","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","isToken","undefined","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","Router","swapCallParameters","trade","options","etherIn","isEther","etherOut","ttl","methodName","args","value","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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"}