// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PrivateKeySpeedBumpModal renders correctly 1`] = `
<View
  accessible={false}
  animatedPosition={
    {
      "_isReanimatedSharedValue": true,
      "addListener": [Function],
      "modify": [Function],
      "removeListener": [Function],
      "value": 0,
    }
  }
  animationConfigs={
    {
      "damping": 500,
      "mass": 1.5,
      "overshootClamping": true,
      "restDisplacementThreshold": 10,
      "restSpeedThreshold": 10,
      "stiffness": 1500,
    }
  }
  backdropComponent={[Function]}
  backgroundStyle={
    {
      "backgroundColor": "#FFFFFF",
    }
  }
  containerStyle={
    {
      "zIndex": 1060,
    }
  }
  enableContentPanningGesture={true}
  enableDynamicSizing={true}
  enableHandlePanningGesture={true}
  handleComponent={[Function]}
  onAnimate={[Function]}
  onDismiss={[MockFunction]}
  stackBehavior="push"
  topInset={0}
>
  <View
    style={
      [
        {
          "backgroundColor": "#FFFFFF",
        },
        {
          "paddingBottom": 0,
        },
      ]
    }
  >
    <View
      style={
        {
          "flexDirection": "column",
          "paddingLeft": 24,
          "paddingRight": 24,
          "paddingTop": 8,
        }
      }
    >
      <View
        style={
          {
            "flexDirection": "row",
            "justifyContent": "center",
          }
        }
      >
        <View
          collapsable={false}
          focusVisibleStyle={
            {
              "scaleX": 0.9299999999999999,
              "scaleY": 0.9299999999999999,
            }
          }
          forwardedRef={[Function]}
          jestAnimatedStyle={
            {
              "value": {
                "transform": [
                  {
                    "scale": 1,
                  },
                ],
              },
            }
          }
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onLayout={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "alignItems": "center",
              "backgroundColor": "rgba(34,34,34,0.05)",
              "borderBottomColor": "transparent",
              "borderBottomLeftRadius": 16,
              "borderBottomRightRadius": 16,
              "borderBottomWidth": 1,
              "borderLeftColor": "transparent",
              "borderLeftWidth": 1,
              "borderRightColor": "transparent",
              "borderRightWidth": 1,
              "borderStyle": "solid",
              "borderTopColor": "transparent",
              "borderTopLeftRadius": 16,
              "borderTopRightRadius": 16,
              "borderTopWidth": 1,
              "flexDirection": "row",
              "gap": 8,
              "height": "auto",
              "justifyContent": "center",
              "paddingBottom": 12,
              "paddingLeft": 12,
              "paddingRight": 12,
              "paddingTop": 12,
              "transform": [
                {
                  "scale": 1,
                },
              ],
            }
          }
        >
          <RNSVGSvgView
            align="xMidYMid"
            bbHeight={24}
            bbWidth={24}
            fill="none"
            focusable={false}
            meetOrSlice={0}
            minX={0}
            minY={0}
            strokeWidth={8}
            style={
              [
                {
                  "backgroundColor": "transparent",
                  "borderWidth": 0,
                },
                {
                  "color": {
                    "dynamic": {
                      "dark": "#FFFFFF",
                      "light": "#131313",
                    },
                  },
                  "height": 24,
                  "width": 24,
                },
                {
                  "flex": 0,
                  "height": 24,
                  "width": 24,
                },
              ]
            }
            vbHeight={24}
            vbWidth={24}
          >
            <RNSVGGroup
              color={
                {
                  "dynamic": {
                    "dark": "#FFFFFF",
                    "light": "#131313",
                  },
                }
              }
              fill={null}
              propList={
                [
                  "fill",
                  "strokeWidth",
                ]
              }
              strokeWidth={8}
            >
              <RNSVGPath
                d="M15 3C11.69 3 9 5.69 9 9C9 9.61 9.09001 10.19 9.26001 10.74L3 17V21H7V18H10L13.26 14.74C13.81 14.91 14.39 15 15 15C18.31 15 21 12.31 21 9C21 5.69 18.31 3 15 3ZM16.02 9.25C15.331 9.25 14.7649 8.69 14.7649 8C14.7649 7.31 15.32 6.75 16.01 6.75H16.02C16.71 6.75 17.27 7.31 17.27 8C17.27 8.69 16.71 9.25 16.02 9.25Z"
                fill={
                  {
                    "type": 2,
                  }
                }
                propList={
                  [
                    "fill",
                  ]
                }
              />
            </RNSVGGroup>
          </RNSVGSvgView>
        </View>
      </View>
      <Text
        allowFontScaling={true}
        maxFontSizeMultiplier={1.4}
        style={
          {
            "color": {
              "dynamic": {
                "dark": "#FFFFFF",
                "light": "#131313",
              },
            },
            "fontFamily": "Basel Grotesk",
            "fontSize": 19,
            "fontWeight": "400",
            "lineHeight": 24,
            "paddingTop": 24,
            "textAlign": "center",
          }
        }
        suppressHighlighting={true}
      >
        Export your private key
      </Text>
      <Text
        allowFontScaling={true}
        maxFontSizeMultiplier={1.4}
        style={
          {
            "color": {
              "dynamic": {
                "dark": "rgba(255, 255, 255, 0.65)",
                "light": "rgba(19, 19, 19, 0.63)",
              },
            },
            "fontFamily": "Basel Grotesk",
            "fontSize": 17,
            "fontWeight": "400",
            "lineHeight": 22.1,
            "paddingTop": 8,
            "textAlign": "center",
          }
        }
        suppressHighlighting={true}
      >
        It looks like youâ€™re not able to fully restore your wallet. To make sure you never lose access to your funds, write down your private key.
        <Text
          allowFontScaling={true}
          maxFontSizeMultiplier={1.4}
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "color": {
                "dynamic": {
                  "dark": "#FFFFFF",
                  "light": "#131313",
                },
              },
              "fontFamily": "Basel Grotesk",
              "fontSize": 17,
              "fontWeight": "400",
              "lineHeight": 22.1,
              "marginLeft": 4,
            }
          }
          suppressHighlighting={true}
        >
           Learn more
        </Text>
      </Text>
      <View
        style={
          {
            "flexDirection": "column",
            "paddingTop": 16,
          }
        }
      >
        <View
          style={
            {
              "backgroundColor": {
                "dynamic": {
                  "dark": "#1F1F1F",
                  "light": "#F9F9F9",
                },
              },
              "borderBottomLeftRadius": 16,
              "borderBottomRightRadius": 16,
              "borderTopLeftRadius": 16,
              "borderTopRightRadius": 16,
              "flexDirection": "row",
              "gap": 12,
              "paddingBottom": 12,
              "paddingLeft": 12,
              "paddingRight": 12,
              "paddingTop": 12,
            }
          }
        >
          <View
            style={
              {
                "flexDirection": "column",
              }
            }
          >
            <RNSVGSvgView
              align="xMidYMid"
              bbHeight={20}
              bbWidth={20}
              fill="currentColor"
              focusable={false}
              meetOrSlice={0}
              minX={0}
              minY={0}
              strokeWidth={8}
              style={
                [
                  {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  {
                    "color": "rgba(19, 19, 19, 0.63)",
                    "height": 20,
                    "width": 20,
                  },
                  {
                    "flex": 0,
                    "height": 20,
                    "width": 20,
                  },
                ]
              }
              vbHeight={24}
              vbWidth={24}
            >
              <RNSVGGroup
                color="rgba(19, 19, 19, 0.63)"
                fill={
                  {
                    "type": 2,
                  }
                }
                propList={
                  [
                    "fill",
                    "strokeWidth",
                  ]
                }
                strokeWidth={8}
              >
                <RNSVGPath
                  d="M21.6074 17.1522L15.0004 4.79599C13.7204 2.40199 10.2814 2.40199 9.00042 4.79599L2.39349 17.1522C1.21949 19.3482 2.81353 22.0001 5.30853 22.0001H18.6923C21.1863 22.0001 22.7814 19.3472 21.6074 17.1522ZM11.2504 10.0001C11.2504 9.58609 11.5864 9.25009 12.0004 9.25009C12.4144 9.25009 12.7504 9.58609 12.7504 10.0001V14.0001C12.7504 14.4141 12.4144 14.7501 12.0004 14.7501C11.5864 14.7501 11.2504 14.4141 11.2504 14.0001V10.0001ZM12.0204 18.0001C11.4684 18.0001 11.0153 17.5521 11.0153 17.0001C11.0153 16.4481 11.4584 16.0001 12.0104 16.0001H12.0204C12.5734 16.0001 13.0204 16.4481 13.0204 17.0001C13.0204 17.5521 12.5724 18.0001 12.0204 18.0001Z"
                  fill={
                    {
                      "type": 2,
                    }
                  }
                  propList={
                    [
                      "fill",
                    ]
                  }
                />
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
          <View
            style={
              {
                "flex": 1,
                "flexDirection": "row",
                "flexGrow": 1,
                "gap": 4,
                "justifyContent": "space-between",
              }
            }
          >
            <View
              style={
                {
                  "flex": 1,
                  "flexDirection": "column",
                  "flexGrow": 1,
                  "gap": 2,
                }
              }
            >
              <Text
                allowFontScaling={true}
                maxFontSizeMultiplier={1.4}
                style={
                  {
                    "color": {
                      "dynamic": {
                        "dark": "rgba(255, 255, 255, 0.65)",
                        "light": "rgba(19, 19, 19, 0.63)",
                      },
                    },
                    "fontFamily": "Basel Grotesk",
                    "fontSize": 15,
                    "fontWeight": "400",
                    "lineHeight": 19.5,
                  }
                }
                suppressHighlighting={true}
              >
                If you lose your phone or delete the app, youâ€™ll need to import this key into a different wallet.
              </Text>
            </View>
          </View>
        </View>
      </View>
      <View
        style={
          {
            "flexDirection": "row",
            "paddingBottom": 24,
            "paddingTop": 24,
          }
        }
      >
        <View
          collapsable={false}
          dd-action-name="Continue"
          focusVisibleStyle={
            {
              "backgroundColor": "#E500A5",
            }
          }
          forwardedRef={[Function]}
          jestAnimatedStyle={
            {
              "value": {
                "transform": [
                  {
                    "scale": 1,
                  },
                ],
              },
            }
          }
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onLayout={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "alignItems": "center",
              "alignSelf": "stretch",
              "backgroundColor": "#FF37C7",
              "borderBottomColor": "transparent",
              "borderBottomLeftRadius": 16,
              "borderBottomRightRadius": 16,
              "borderBottomWidth": 1,
              "borderLeftColor": "transparent",
              "borderLeftWidth": 1,
              "borderRightColor": "transparent",
              "borderRightWidth": 1,
              "borderStyle": "solid",
              "borderTopColor": "transparent",
              "borderTopLeftRadius": 16,
              "borderTopRightRadius": 16,
              "borderTopWidth": 1,
              "flex": 1,
              "flexBasis": 0,
              "flexDirection": "row",
              "gap": 8,
              "height": "auto",
              "justifyContent": "center",
              "paddingBottom": 12,
              "paddingLeft": 16,
              "paddingRight": 16,
              "paddingTop": 12,
              "transform": [
                {
                  "scale": 1,
                },
              ],
            }
          }
          testID="continue"
        >
          <Text
            maxFontSizeMultiplier={1.2}
            numberOfLines={1}
            onBlur={[Function]}
            onFocus={[Function]}
            style={
              {
                "color": {
                  "dynamic": {
                    "dark": "#FFFFFF",
                    "light": "#FFFFFF",
                  },
                },
                "fontFamily": "Basel Grotesk",
                "fontSize": 17,
                "fontWeight": "500",
                "lineHeight": 21.849999999999998,
              }
            }
            suppressHighlighting={true}
          >
            Continue
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;
